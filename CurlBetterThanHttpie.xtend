/*
 * generated by Xtext 2.12.0
 */
package aitchteeteepie.xtext.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import aitchteeteepie.CommandLineInterface
import aitchteeteepie.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CurlBetterThanHttpieGenerator extends AbstractGenerator {
	private boolean formFlag=false;
	
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("curl").lastSegment,
			res.allContents.filter(CommandLineInterface).toIterable.head.compile.toString)
	}
	
	def dispatch compile(CommandLineInterface req) {
		
		if(req.url==null){
			req.url="localhost";
		}
		if (req.method==null){
			req.method=Method.GET;
		}
		if (req.protocol==null){
			req.protocol="https";
		}
		if(req.port==0){
			req.port=8080;
		}
	
		val flagsCmpl = req.flags.map[option | option.compile]
		
		val UrlParameterItem = req.items.filter[param | param.eClass.name.equals("UrlParameterItem")]
		val HttpHeaderItem = req.items.filter[param | param.eClass.name.equals("HttpHeaderItem")]
		val DataFieldItem = req.items.filter[param | param.eClass.name.equals("DataFieldItem")]
		val FormFileFieldItem = req.items.filter[param | param.eClass.name.equals("FormFileFieldItem")]
		val RawJsonFieldItem = req.items.filter[param | param.eClass.name.equals("RawJsonFieldItem")]
		
		val urlParametersCmpl = UrlParameterItem.map[param | param.compile]
		val httpHeadersCmpl = HttpHeaderItem.map[param | param.compile]
		val dataFieldsCmpl = DataFieldItem.map[param | param.compile]
		val formFieldsCmpl = FormFileFieldItem.map[param | param.compile]
		val rawJsonFieldCmpl = RawJsonFieldItem.map[param | param.compile]
		
		var dataFieldsString = ""
		if(dataFieldsCmpl.size > 0 && !formFlag)
			dataFieldsString = '-d "' + dataFieldsCmpl.join('&') + '"'
		else{
			dataFieldsString = dataFieldsCmpl.join(' ')
		}
		var urlParametersString = ""
		if(urlParametersCmpl.size > 0)
			urlParametersString = '?' + urlParametersCmpl.join('&')
		
		'''curl «req.method.compile» «httpHeadersCmpl.join(' ')» «flagsCmpl.join(' ')» «req.protocol»://«req.url»:«req.port»«urlParametersString» «dataFieldsString»«formFieldsCmpl.join(' ')»'''
	}
	
	def dispatch compile(VerboseFlag vb) '''-v'''
	
	def dispatch compile(DownloadFlag dl) '''-O'''
	
	def dispatch compile(HeadersFlag hf) '''-D'''
	
	def dispatch compile (Flag f) '''«f.compile»'''
	
	def dispatch compile(BodyFlag bf) '''-i'''
	
	def dispatch compile(HelpFlag hf) '''-h'''
	
	def dispatch compile(VersionFlag hf) '''--version'''
	
	def dispatch compile(TimeoutFlag tf) '''-m «tf.timeout»'''
	
	def dispatch compile(Method get) '''-X «get.getName()»'''
	
	def dispatch compile(FormFlag ff){
		formFlag=true;
		'''Content-Type: application/x-www-form-urlencoded; charset=utf-8'''
	}
	
	def dispatch compile(JsonFlag jf) '''-H "Content-Type: application/json"'''
	
	def dispatch compile(AuthFlag af) '''--user «af.username»:«af.password» «af.hostname»'''
	
	def dispatch compile(ProxyFlag pf) '''--proxy-user «pf.username»:«pf.password»'''
	
	def dispatch compile(HttpHeaderItem http) '''-H "«http.field»: «http.value»"'''
	
	def dispatch compile(UrlParameterItem urlParam) '''«urlParam.field»=«urlParam.value»'''
	
	def dispatch compile(FormFileFieldItem formField)''' -d "@«formField.value»"'''
	
	def dispatch compile(DataFieldItem data){
		if(formFlag)
			''' -F «data.field»=«data.value»'''
		else{
			'''«data.field»=«data.value»'''
		}
	}
	
	def dispatch compile(RawJsonFieldItem rawJsonField) '''#TODO'''
	
}

